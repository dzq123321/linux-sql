//1、 echo $? 查看上一个进程的退出码
//2、  which ls   查看ls命令的位置

// 视图模式  ctrl +v   选中视图块， 点击A后就可添加文本 
// waitpid(id,status,WNOHANG) / fork() ->  
#include <stdio.h> 
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <sys/types.h>
int main()
{
    pid_t pid;
    pid = fork();
    if(pid < 0){
    printf("%s fork error\n",__FUNCTION__);
    return 1;
    }
    else if( pid == 0 ){ //child
       printf("child is run, pid is : %d\n",getpid());
       sleep(5);
        exit(1);
    } 
	else{
      int status = 0;
      pid_t ret = 0;
    while(1)
    {
        ret = waitpid(-1, &status, WNOHANG);//加WNOHANG是非阻塞式等待，如果带三个参数为0，则是阻塞式等待
        if( ret == 0 ){   //返回0，说明子进程没有运行完，父进程阻塞式等待，父进程循环访问子进程是否完成
        printf("child do other thing\n");
          }
		  else
			  break;  //如果非·0，退出程序。则说明waitpid完成，>0 说明返回ret=子进程id,waitpid成功，ret=-1,waipid失败
    }
	if(ret >0)
	{
		if(WIFEXITED(status)){
			cout<<"child 退出正常,exit code is : "<<WEXITSTATUS(status)<<endl;
		}else{
			cout<<"child 退出异常 sig code: "<<status&0x7f<<endl;
		}
	}
	else{
    printf("wait child failed, return.\n");
     return 1;
    }
   return 0;
}
//进程  execle 
#include<iostream>
#include<stdlib.h>
using namespace std;
int main(){
    cout<<"env value: "<<getenv("MY_ENV_VALUE")<<endl;
    cout<<"hello world"<<endl;
    return 0;
}

//---------------------------------
#include<iostream>
#include<unistd.h>
#include<sys/types.h>
#include<sys/wait.h>
#include<stdlib.h>
using namespace std;
int main()
{
    pid_t id=fork();
    if(id== 0){
        sleep(3);
        char *const my_env[]= {"MY_ENV_VALUE=123456"};
        execle("/home/test/Linux/t","t",NULL,my_env);      //带入环境变量
        exit(1);
    }
    else if(id > 0){
        cout<< "father waiting"<<endl;
        pid_t ret = waitpid(id,NULL,0);
        cout << "father wait done"<<endl;
    }
    else{

    }
    return 0;
}

------------利用进程替换编写简单的shell
#include<iostream>
#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/wait.h>
#include<stdlib.h>
using namespace std;
#define MAX 1024
int main()
{

    char *myargv[MAX];
    char cmd[MAX];
    int i=0;
    while(1){
        cout<<"[xiaodu@HOSTNAME shell]#  ";
        gets(cmd);
        pid_t id =fork();
        if(id == 0){
            myargv[i] =cmd;
            char *p=cmd;
            while(*p){
                if(isspace(*p)){
                    *p='\0';
                        p++;
                    i++;
                    myargv[i] =p;
                    continue;
                }
                p++;
            }
            myargv[++i] =NULL;
            execvp(myargv[0],myargv);
        }
        else if(id >0){
            waitpid(id,NULL,0);
        }
        else{

        }
    }
    return 0;
}

// ssize_t 可以理解为有符号的size_t,而size_t在32位下是	unsigned int(4字节)   64位是unsigned long(8字节)
///---------------------------将信息输出到显示器上
#include<stdio.h>
#include<string.h>
int main(){
	const char *msg="hello fewrite\n";  
	fwrite(msg,strlen(msg),1,stdout);   //1
	printf("hello printf\n"); //2
	//fprintf(stdout,"hello fprintf\n");   //3
	fprintf(stdout,msg);
	return 0;
}
----再加一个   //系统调用的write open  read  
#include<string.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
int main(){
   umask(0);
    int fd=open("myfile",O_RDWR);
    if(fd<0){
        perror("open");
        return 1;
    }
    int count=5;
    const char *msg="hello bit\n";
    int len=strlen(msg);
    while(count--)
    {
        write(fd,msg,len);
    }
   char buf[1024];
   // while(1){
        ssize_t s=read(fd,buf,len);//读文件的时候都是读到buf里然后输出
        if(s>0)
        {
            printf("%s",buf);
        }
   //     else
     //       break;
   // }
    close(fd);
    return 0;
}
-----------------------------------------
int main(){    //从标准输入中读取文件然后打印到标准输出和标准错误中
    char buf[1024];
    ssize_t s=read(0,buf,sizeof(buf));  //0标准输入 1标准输出 2标注错误
    if(s>0){
        buf[s]=0;
        write(1,buf,strlen(buf));
        write(2,buf,strlen(buf));
    }
	return 0;
}
-------------------------------
int main(){
    close(1);
    int fd=open("myfile",O_WRONLY|O_CREAT);
    printf("fd= %d\n",fd);
    fflush(stdout);
    close(fd);    //fflush+close   = fclose =去掉fflush+close   缓冲输出
}
//程序结束会自动刷新缓冲区，close会关闭文件描述符无法刷新，所以要加fflush,或者两者都不要/或者fclose代表只关闭文件指针，所以可以刷新缓冲区
哪些情况下会刷新输入缓冲区？
1：输入缓冲区满的时候。
2：cin.sync()等刷新输入缓冲区的操作。
3:程序正常结束的时候。
int main(){
  const  char *msg1="hello printf\n";  //c库函数 往显示器上打印是行缓冲，在重定向到文件输出是全缓冲，而write是无缓冲的
  const  char *msg2="hello fpritf\n";
  const  char *msg3="hello fwrite\n";
  const  char *msg4="hello write\n";
    printf(msg1);
    fprintf(stdout,msg2);
    fwrite(msg3,1,strlen(msg3),stdout);
    write(1,msg4,strlen(msg4));
	fork();                        //加入fork,重定向输出（./test > log.txt）c库函数全缓存，所以在父进程的缓存数据会拷贝到子进程，所以printf,fprintf,fwrite会打印两次
	}                               //而write无缓冲，父进程已经刷新，所以在拷贝到子进程时已无数据
//umask      不是做减法
//umask 0001 去掉建立文件的other的可执行权限    umask 0002 去掉建立文件的other的写权限  
第一个0代表sgid无关
第2个0代表去掉拥有者的什么权限  例如umask 0500  去掉拥有者的读和可执行权限   查看文件拥有者权限 -w- 只有写权限
第3个0代表去掉所other的什么权限   同上
---------------------------------------
kill 命令
kill + pid  默认为 kill -15 pid
系统会发送一个SIGTERM的信号给对应的程序。当程序接收到该signal后，将会发生以下的事情
程序立刻停止
当程序释放相应资源后再停止
程序可能仍然继续运行
      大部分程序接收到SIGTERM信号后，会先释放自己的资源，然后在停止。但是也有程序可以在接受到信号量后，做一些其他的事情，并且这些事情是可以
      配置的。如果程序正在等待IO，可能就不会立马做出相应。
　　也就是说，SIGTERM多半是会被阻塞的、忽略
kill- 9 pid 强制删除
----------------------
信号不是立即被处理的，是在合适的时候，什么是合适的时候呢？
在进程从内核态，切换回用户态时，进行信号的检测并处理

每个进程都有地址空间，每个进程地址空间都被划分成2个区域，3G用户，1G内核。

所有进程的1G内核空间，每个进程都有一份，但是只有一张内核级页表，被所有进程共享
但是每个进程都有一个属于自己的用户级页表

用户态，是执行用户代码的一种状态，
此时他的权限是要受到约束的
内核态，是进程进入os的一种状态，此时他的权限是系统权限

